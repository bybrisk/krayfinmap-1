{"version":3,"sources":["views/app/application/cluster/clusterMap.js","components/application/deliveryTable/clusterDeliveries.js","components/application/clusterTable/tableHead.js","components/application/clusterTable/toolbar.js","components/application/clusterTable/table.js"],"names":["useStyles","makeStyles","theme","listItem","paddingTop","paddingBottom","avatar","height","width","borderRadius","iconContainer","minWidth","cardContainer","position","top","right","maxWidth","maxHeight","zIndex","overflow","background","textAlign","transition","boxShadow","display","alignItems","justifyContent","AnyReactComponent","color","style","ClusterMap","enqueueSnackbar","useSnackbar","classes","useState","clusters","setClusters","isLoading","setLoading","lat","lng","center","bybId","useSelector","state","zoom","setZoom","useEffect","fetchClusters","console","log","name","content","className","id","aria-label","length","marginTop","map","item","index","button","key","clusterid","component","Link","to","pathname","clusterID","variant","primary","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onChange","bounds","clusterItem","geometry","latitude","longitude","text","filterLength","props","array","filter","_source","deliveryStatus","ClusterDeliveries","location","history","useHistory","fetchClusterDeliveries","setDelivery","React","rows","fallback","onClick","goBack","EnhancedTableHead","order","orderBy","onRequestSort","headCells","TableHead","TableRow","headCell","align","padding","disablePadding","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","tableToolbar","title","fontWeight","fontSize","toolbarContainer","spacing","Toolbar","totaldeliveries","isSubmitting","setSubmitting","setAgents","fetchAgents","cluster","setCluster","Grid","container","justify","xs","md","Typography","gutterBottom","marginBottom","lg","TextField","marginRight","margin","e","target","value","type","min","max","helperText","disableFocusRipple","disableElevation","clusterData","JSON","stringify","BybID","NumberOfCluster","parseInt","postCluster","CircularProgress","root","paper","table","border","clip","backgroundColor","red","ClusterTable","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","genetateOverview","emptyRows","Math","Helmet","Paper","calculatedlength","i","totalDeliveries","calculatedLength","TableContainer","Table","aria-labelledby","rowCount","numeric","TableBody","stableSort","getComparator","slice","row","tabIndex","deliveryAgentID","distanceObserved","toFixed","averageWeight","TableCell","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage"],"mappings":"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","file":"static/js/views-error.891edfeb.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Paper } from \"@material-ui/core\";\r\nimport {useSelector} from 'react-redux'\r\nimport { fetchClusters } from \"helpers/NetworkRequest\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Helmet } from \"react-helmet\";\r\nimport {Link} from 'react-router-dom'\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem:{\r\npaddingTop:0,\r\npaddingBottom:0,\r\n  },\r\n  avatar:{\r\n    height:20,\r\n    width:20,\r\n    borderRadius:'50%',\r\n    \r\n  },\r\n  iconContainer:{\r\n    minWidth:30\r\n  },\r\n  cardContainer:{\r\n    position: \"absolute\",\r\n    top:150,\r\n    right:45,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    zIndex:60,\r\n    overflow:'scroll',\r\n    background:'#fff',\r\n    textAlign: \"left\",\r\n    borderRadius: 10,\r\n    transition: \"all 0.4s\",\r\n    boxShadow: \"0px 0px 120px -25px rgba(0, 0, 0, 0.5)\",\r\n    display:'flex',\r\n    alignItems: \"flex-start\",justifyContent:\"center\",minWidth:100\r\n  },\r\n}));\r\n\r\nconst AnyReactComponent = ({ color }) => (\r\n  <div>\r\n    <RoomRoundedIcon style={{ color: color }} />\r\n  </div>\r\n);\r\n\r\nconst ClusterMap = () => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const classes = useStyles();\r\n  const [clusters,setClusters] = useState([])\r\n  const [isLoading,setLoading] = useState(false);\r\n  const [center, setCenter] = useState({\r\n    lat: 23.202357,\r\n    lng: 77.414254\r\n  });\r\n  const bybId = useSelector(state => state.bybId)\r\n  const [zoom, setZoom] = useState(11);\r\n  useEffect(() => {\r\n    setLoading(true)\r\n      fetchClusters({bybId, setClusters,enqueueSnackbar,setLoading})\r\n      return () => {\r\n\r\n       }\r\n  }, [bybId])\r\n  console.log(clusters);\r\n  return (\r\n      <>\r\n           <Helmet>\r\n        <title>Cluster Summary</title>\r\n        <meta name=\"description\" content=\"Visual Representation of Deliveries of your account Made Simple\"  />\r\n      </Helmet>\r\n    <div style={{ height: \"90vh\", width: \"100%\" }}>\r\n          <div className={classes.cardContainer} id=\"bright\">\r\n  {isLoading?(<CircularProgress\r\n   style={{height: \"30px\",\r\n     width: \"30px\",\r\n   color: \"#4caf50\"\r\n    }}\r\n       />\r\n       ):(\r\n        <List aria-label=\"Cluster display\">\r\n      \r\n      {clusters.length===0 && <ListItem className={classes.listItem} style={{marginTop:23,color:'#057g78'}}>No Clusters Present</ListItem>}\r\n      {clusters.map((item,index)=>{\r\n        return   <ListItem button key={item[0].clusterid} component={Link} to={{ pathname: '/dashboard/clusterDeliveries', state: { clusterID: item[0].clusterid} }} className={classes.listItem}>\r\n        <ListItemIcon className={classes.iconContainer}>\r\n    <Paper className={classes.avatar} style={{background:item[0].color}} variant={'circle'}></Paper>\r\n        </ListItemIcon>\r\n        <ListItemText primary={`cluser ${index}`} />\r\n      </ListItem>\r\n   \r\n      })}\r\n        \r\n      </List>\r\n    \r\n       )}\r\n      </div>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyCuMJ3dhADqNoE4tGuWTI3_NlwBihj5BtE\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n        }}\r\n        \r\n      >\r\n        {clusters.map((item) => {\r\n          return item.map((clusterItem) => {\r\n            return (\r\n              <AnyReactComponent\r\n                lat={clusterItem.geometry.latitude}\r\n                lng={clusterItem.geometry.longitude}\r\n                color={clusterItem.color}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </GoogleMapReact>\r\n    </div>\r\n  </>);\r\n};\r\nexport default ClusterMap;\r\n","//basic dependencies\r\nimport red from '@material-ui/core/colors/indigo';\r\n//dependencies for modal\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport TableContainer from './tableContainer';\r\nimport React, { useEffect, Suspense} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\nimport Loader from '../Loader/Loader'\r\nimport { Helmet } from \"react-helmet\";\r\n// import AgentDetail from '../AgentDetails'\r\nimport { fetchClusterDeliveries } from 'helpers/NetworkRequest';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n//divided component to make them one\r\n\r\n\r\n\r\n//fetchDeliveryDetails to be replaced with get all deliveries\r\n\r\n\r\n\r\n\r\nconst filterLength = (props) => {\r\nconst {array,filter} = props;\r\nreturn array.filter(item=>item._source.deliveryStatus===filter).length\r\n}\r\n\r\nexport default function ClusterDeliveries(props) {\r\n    console.log(props.location,props.location.state,\"--------------------------------\")\r\n    const history = useHistory()\r\nconst clusterID = props.location.state!==null && props.location.state.clusterID\r\nconsole.log(clusterID)\r\n    useEffect(() => {\r\n        fetchClusterDeliveries({clusterID,setDelivery});\r\n  }, [clusterID])\r\n\r\n  const [rows,setDelivery] = React.useState([])\r\n   \r\nconst filterStats = {\r\n  DeliveryDelivered:filterLength({array:rows,filter:'confirmed'}),\r\n  DeliveryCancelled:filterLength({array:rows,filter:'cancelled'}),\r\n  DeliveryPending:filterLength({array:rows,filter:'pending'}),\r\n  DeliveryTransit:filterLength({array:rows,filter:'transit'})\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n     <Helmet>\r\n        <title>Deliveries</title>\r\n        <meta name=\"description\" content=\"List of Deliveries of your account\"  />\r\n      </Helmet>\r\n <Suspense fallback={<Loader />}>\r\n<ArrowBackIcon onClick={()=>history.goBack()}/>\r\n  <TableContainer rows={rows} setDelivery={setDelivery} />\r\n   </Suspense>\r\n  </>\r\n  );\r\n}\r\n","import TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { StyledTableCell } from '../tableHelpers/helpers';\r\n  \r\n  //this is function to desplay table heads\r\n  function EnhancedTableHead(props) {\r\n    const { classes, order, orderBy, onRequestSort ,headCells} = props;\r\n    \r\n    //helper function to call onRequestSort(handleRequestSort)\r\n    const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n    };\r\n  \r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {headCells.map((headCell) => (\r\n            <StyledTableCell\r\n              key={headCell.id}\r\n              align={'center'}\r\n              padding={headCell.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : 'asc'}\r\n                onClick={createSortHandler(headCell.id)}\r\n              >\r\n                {headCell.label}\r\n                {orderBy === headCell.id ? (\r\n                  <span className={classes.visuallyHidden}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </StyledTableCell>\r\n          ))}  \r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n  \r\n  EnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n  };\r\n  \r\n\r\n  export default EnhancedTableHead","import React,{useState,useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {postCluster,fetchAgents} from 'helpers/NetworkRequest'\r\nimport {useSelector} from \"react-redux\";\r\nimport { useSnackbar } from 'notistack';\r\nimport ReactButton from \"../button/button\";\r\n\r\n\r\n\r\n\r\nconst tableToolbar = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 550,\r\n    fontSize: \"2rem\"\r\n  },\r\n  toolbarContainer: {\r\n    padding: theme.spacing(3, 1)\r\n  }\r\n}));\r\n\r\nexport default function Toolbar(props) {\r\n  console.log(props)\r\n  const {setClusters,totaldeliveries} = props\r\n    const [isSubmitting,setSubmitting] = useState(false);\r\n    const [rows,setAgents] = React.useState([])\r\n    const bybId = useSelector(state => state.bybId)\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        fetchAgents({bybId,setAgents});\r\n      \r\n          return () => {\r\n            \r\n          }\r\n        }, [bybId])\r\n    const [cluster,setCluster] = useState(null);\r\n\r\n\r\n    const handleClusters = () =>{\r\n        setSubmitting(true)\r\n\r\n        console.log(rows,cluster>rows.length,cluster===0,\"---------------\")\r\n        console.log(cluster,\"-------------------\")\r\n        if(cluster>rows.length || cluster===0){\r\n          console.log('This cluster cannot be made')\r\n            setSubmitting(false)\r\n            setCluster(null)\r\nreturn;\r\n        }\r\nelse{\r\n  const clusterData = JSON.stringify({\r\n    BybID:bybId,\r\n    NumberOfCluster: parseInt(cluster, 10)\r\n})\r\npostCluster({clusterData,enqueueSnackbar,setSubmitting,bybId, setCluster})\r\n}\r\n    \r\nsetCluster(0)\r\n      }\r\n  const classes = tableToolbar();\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      className={classes.toolbarContainer}\r\n    >\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" >\r\n        <Typography\r\n          variant=\"h5\"\r\n          component={\"h6\"}\r\n          gutterBottom\r\n          className={classes.title}\r\n        >\r\n          Cluster\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={2} container>\r\n          <Typography variant=\"h6\">No. of Clusters :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"flex-start\">\r\n          <TextField\r\n            variant=\"outlined\"\r\n            style={{ maxWidth: 200, marginRight: 30 }}\r\n            margin=\"dense\"\r\n            onChange={e=>setCluster(e.target.value)}\r\n            type={'number'}\r\n            min={0}\r\n            max={rows.length}\r\n            helperText=\"Must be less than no. of Agents Added to your account\"\r\n\r\n          />\r\n          <ReactButton variant=\"contained\"         disableFocusRipple={true}\r\n                        disableElevation={true}\r\n                        type=\"submit\"\r\n                        onClick={handleClusters}\r\n\r\n style={{marginTop:6,\r\n    maxWidth: 180}}>\r\n  {isSubmitting ? (\r\n                          <CircularProgress\r\n                            style={{\r\n                              height: \"20px\",\r\n                              width: \"20px\",\r\n                              color: \"#fff\"\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          'Create Clusters'\r\n                        )}\r\n </ReactButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={3} container alignItems=\"center\">\r\n          <Typography variant=\"h6\">Total Deliveries :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"center\">\r\n          <Typography variant=\"h4\" component=\"h5\">{totaldeliveries}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","//basic dependencies\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport red from '@material-ui/core/colors/indigo';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\n//dependencies for modal\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport React, { Component, useState,useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { genetateOverview } from 'helpers/NetworkRequest';\r\nimport { getComparator, stableSort, StyledTableCell, StyledTableRow } from '../tableHelpers/helpers';\r\nimport EnhancedTableHead from './tableHead';\r\n//divided component to make them one\r\nimport EnhancedTableToolbar from './toolbar';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    padding:theme.spacing(3)\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    paddingTop:20\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  avatar: {\r\n    color: '#ffffff',\r\n    backgroundColor:red[700],\r\n  },\r\n}));\r\n\r\nexport default function ClusterTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('AgentID');\r\n  const [page, setPage] = React.useState(0);\r\n  const [agentid, setagentid] = React.useState('');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [isLoading,setLoading] = useState(false);\r\n\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [rows,setClusters] = React.useState([])\r\n  \r\n  const bybId = useSelector(state => state.bybId);\r\n  const headCells = [\r\n    { id: 'clusterid', numeric: true, disablePadding: false, label: 'Cluster ID' },\r\n    { id: 'deliveryAgentID', numeric: true, disablePadding: false, label: 'Agent ID' },\r\n    { id: 'totalDeliveries', numeric: false, disablePadding: false, label: 'Deliveries in Cluster' },\r\n    { id: 'distanceObserved', numeric: true, disablePadding: false, label: 'Distance Observed' },\r\n    { id: 'averageWeight', numeric: true, disablePadding: false, label: 'Total Weight' },\r\n\r\n  ];\r\n\r\n\r\n\r\n  useEffect( () => {\r\n    genetateOverview({bybId, setClusters})\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [bybId])\r\n\r\n  \r\n\r\n  //this function set the state for sorting information\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n  //function for page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const calculatedLength = () =>{\r\n    let calculatedlength=0;\r\n      for(let i=0;i<rows.length;i++){\r\n        console.log(rows[i].totalDeliveries,calculatedlength,\"====---===---===---==\")\r\ncalculatedlength+=rows[i].totalDeliveries\r\n    }\r\n    return calculatedlength;\r\n  }\r\n\r\n  //function for row change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n\r\n//telling how many rows can come into this page\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  return (\r\n    <>\r\n   <Helmet>\r\n        <title>Agents</title>\r\n        <meta name=\"description\" content=\"List of Agents Delivering your deliveries\"  />\r\n      </Helmet>\r\n \r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar totaldeliveries={calculatedLength()} setClusters={setClusters} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"Agents\"\r\n            aria-label=\"Agent Data\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {rows && (\r\n                stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => {\r\n                  return (\r\n                    <>\r\n                    <StyledTableRow\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n               <StyledTableCell align=\"center\">{row.clusterid}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deliveryAgentID}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalDeliveries}</StyledTableCell>\r\n               <StyledTableCell align=\"center\">{(row.distanceObserved/1000).toFixed(2)} KM</StyledTableCell>\r\n               <StyledTableCell align=\"center\">{row.averageWeight}</StyledTableCell>\r\n\r\n              {/*<StyledTableCell align=\"center\" style={{cursor:'pointer',color:'blue'}} onClick={()=>handleOpen(row.bybid)}>View</StyledTableCell> */}\r\n                    </StyledTableRow>\r\n                    </>\r\n                  );\r\n                })\r\n              )\r\n                }\r\n              {emptyRows > 0 && (\r\n                <TableRow >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      \r\n    </div>\r\n   \r\n  </>\r\n  );\r\n}\r\n"],"sourceRoot":""}