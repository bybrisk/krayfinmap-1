{"version":3,"sources":["views/app/application/cluster/clusterMap.js","components/application/deliveryTable/clusterDeliveries.js","components/application/clusterTable/tableHead.js","components/application/clusterTable/toolbar.js","components/application/clusterTable/table.js"],"names":["useStyles","makeStyles","theme","listItem","paddingTop","paddingBottom","avatar","height","width","borderRadius","iconContainer","minWidth","cardContainer","position","top","right","maxWidth","maxHeight","zIndex","overflow","background","textAlign","transition","boxShadow","display","alignItems","justifyContent","AnyReactComponent","color","style","ClusterMap","enqueueSnackbar","useSnackbar","classes","useState","clusters","setClusters","isLoading","setLoading","lat","lng","center","bybId","useSelector","state","zoom","setZoom","useEffect","fetchClusters","console","log","name","content","className","id","aria-label","length","marginTop","map","item","index","button","key","clusterid","component","Link","to","pathname","clusterID","variant","primary","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onChange","bounds","clusterItem","geometry","latitude","longitude","text","filterLength","props","array","filter","_source","deliveryStatus","ClusterDeliveries","location","history","useHistory","fetchClusterDeliveries","setDelivery","React","rows","fallback","onClick","goBack","EnhancedTableHead","order","orderBy","onRequestSort","headCells","TableHead","TableRow","headCell","align","padding","disablePadding","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","tableToolbar","title","fontWeight","fontSize","toolbarContainer","spacing","Toolbar","isSubmitting","setSubmitting","setAgents","fetchAgents","cluster","setCluster","Grid","container","justify","xs","md","Typography","gutterBottom","marginBottom","lg","TextField","marginRight","margin","e","target","value","type","min","max","helperText","disableFocusRipple","disableElevation","clusterData","JSON","stringify","BybID","NumberOfCluster","postCluster","CircularProgress","root","paper","table","border","clip","backgroundColor","red","AgentTable","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","genetateOverview","emptyRows","Math","Helmet","Paper","TableContainer","Table","aria-labelledby","rowCount","numeric","TableBody","stableSort","getComparator","slice","row","tabIndex","deliveryAgentID","totalDeliveries","TableCell","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt"],"mappings":"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","file":"static/js/views-error.7fdc529f.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Paper } from \"@material-ui/core\";\r\nimport {useSelector} from 'react-redux'\r\nimport { fetchClusters } from \"helpers/NetworkRequest\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Helmet } from \"react-helmet\";\r\nimport {Link} from 'react-router-dom'\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem:{\r\npaddingTop:0,\r\npaddingBottom:0,\r\n  },\r\n  avatar:{\r\n    height:20,\r\n    width:20,\r\n    borderRadius:'50%',\r\n    \r\n  },\r\n  iconContainer:{\r\n    minWidth:30\r\n  },\r\n  cardContainer:{\r\n    position: \"absolute\",\r\n    top:150,\r\n    right:45,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    zIndex:60,\r\n    overflow:'scroll',\r\n    background:'#fff',\r\n    textAlign: \"left\",\r\n    borderRadius: 10,\r\n    transition: \"all 0.4s\",\r\n    boxShadow: \"0px 0px 120px -25px rgba(0, 0, 0, 0.5)\",\r\n    display:'flex',\r\n    alignItems: \"center\",justifyContent:\"center\",minWidth:100\r\n  },\r\n}));\r\n\r\nconst AnyReactComponent = ({ color }) => (\r\n  <div>\r\n    <RoomRoundedIcon style={{ color: color }} />\r\n  </div>\r\n);\r\n\r\nconst ClusterMap = () => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const classes = useStyles();\r\n  const [clusters,setClusters] = useState([])\r\n  const [isLoading,setLoading] = useState(false);\r\n  const [center, setCenter] = useState({\r\n    lat: 23.202357,\r\n    lng: 77.414254\r\n  });\r\n  const bybId = useSelector(state => state.bybId)\r\n  const [zoom, setZoom] = useState(11);\r\n  useEffect(() => {\r\n    setLoading(true)\r\n      fetchClusters({bybId, setClusters,enqueueSnackbar,setLoading})\r\n      return () => {\r\n\r\n       }\r\n  }, [bybId])\r\n  console.log(clusters);\r\n  return (\r\n      <>\r\n           <Helmet>\r\n        <title>Cluster Summary</title>\r\n        <meta name=\"description\" content=\"Visual Representation of Deliveries of your account Made Simple\"  />\r\n      </Helmet>\r\n    <div style={{ height: \"90vh\", width: \"100%\" }}>\r\n          <div className={classes.cardContainer} id=\"bright\">\r\n  {isLoading?(<CircularProgress\r\n   style={{height: \"30px\",\r\n     width: \"30px\",\r\n   color: \"#4caf50\"\r\n    }}\r\n       />\r\n       ):(\r\n        <List aria-label=\"Cluster display\">\r\n      \r\n      {clusters.length===0 && <ListItem className={classes.listItem} style={{marginTop:23,color:'#057g78'}}>No Clusters Present</ListItem>}\r\n      {clusters.map((item,index)=>{\r\n        return   <ListItem button key={item[0].clusterid} component={Link} to={{ pathname: '/dashboard/clusterDeliveries', state: { clusterID: item[0].clusterid} }} className={classes.listItem}>\r\n        <ListItemIcon className={classes.iconContainer}>\r\n    <Paper className={classes.avatar} style={{background:item[0].color}} variant={'circle'}></Paper>\r\n        </ListItemIcon>\r\n        <ListItemText primary={`cluser ${index}`} />\r\n      </ListItem>\r\n   \r\n      })}\r\n        \r\n      </List>\r\n    \r\n       )}\r\n      </div>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyCuMJ3dhADqNoE4tGuWTI3_NlwBihj5BtE\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n        }}\r\n        \r\n      >\r\n        {clusters.map((item) => {\r\n          return item.map((clusterItem) => {\r\n            return (\r\n              <AnyReactComponent\r\n                lat={clusterItem.geometry.latitude}\r\n                lng={clusterItem.geometry.longitude}\r\n                color={clusterItem.color}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </GoogleMapReact>\r\n    </div>\r\n  </>);\r\n};\r\nexport default ClusterMap;\r\n","//basic dependencies\r\nimport red from '@material-ui/core/colors/indigo';\r\n//dependencies for modal\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport TableContainer from './tableContainer';\r\nimport React, { useEffect, Suspense} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\nimport Loader from '../Loader/Loader'\r\nimport { Helmet } from \"react-helmet\";\r\n// import AgentDetail from '../AgentDetails'\r\nimport { fetchClusterDeliveries } from 'helpers/NetworkRequest';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n//divided component to make them one\r\n\r\n\r\n\r\n//fetchDeliveryDetails to be replaced with get all deliveries\r\n\r\n\r\n\r\n\r\nconst filterLength = (props) => {\r\nconst {array,filter} = props;\r\nreturn array.filter(item=>item._source.deliveryStatus===filter).length\r\n}\r\n\r\nexport default function ClusterDeliveries(props) {\r\n    console.log(props.location,props.location.state,\"--------------------------------\")\r\n    const history = useHistory()\r\nconst clusterID = props.location.state!==null && props.location.state.clusterID\r\nconsole.log(clusterID)\r\n    useEffect(() => {\r\n        fetchClusterDeliveries({clusterID,setDelivery});\r\n  }, [clusterID])\r\n\r\n  const [rows,setDelivery] = React.useState([])\r\n   \r\nconst filterStats = {\r\n  DeliveryDelivered:filterLength({array:rows,filter:'confirmed'}),\r\n  DeliveryCancelled:filterLength({array:rows,filter:'cancelled'}),\r\n  DeliveryPending:filterLength({array:rows,filter:'pending'}),\r\n  DeliveryTransit:filterLength({array:rows,filter:'transit'})\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n     <Helmet>\r\n        <title>Deliveries</title>\r\n        <meta name=\"description\" content=\"List of Deliveries of your account\"  />\r\n      </Helmet>\r\n <Suspense fallback={<Loader />}>\r\n<ArrowBackIcon onClick={()=>history.goBack()}/>\r\n  <TableContainer rows={rows} setDelivery={setDelivery} />\r\n   </Suspense>\r\n  </>\r\n  );\r\n}\r\n","import TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { StyledTableCell } from '../tableHelpers/helpers';\r\n  \r\n  //this is function to desplay table heads\r\n  function EnhancedTableHead(props) {\r\n    const { classes, order, orderBy, onRequestSort ,headCells} = props;\r\n    \r\n    //helper function to call onRequestSort(handleRequestSort)\r\n    const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n    };\r\n  \r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {headCells.map((headCell) => (\r\n            <StyledTableCell\r\n              key={headCell.id}\r\n              align={'center'}\r\n              padding={headCell.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : 'asc'}\r\n                onClick={createSortHandler(headCell.id)}\r\n              >\r\n                {headCell.label}\r\n                {orderBy === headCell.id ? (\r\n                  <span className={classes.visuallyHidden}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </StyledTableCell>\r\n          ))}  \r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n  \r\n  EnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n  };\r\n  \r\n\r\n  export default EnhancedTableHead","import React,{useState,useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {postCluster,fetchAgents} from 'helpers/NetworkRequest'\r\nimport {useSelector} from \"react-redux\";\r\nimport { useSnackbar } from 'notistack';\r\nimport ReactButton from \"../button/button\";\r\n\r\n\r\n\r\n\r\nconst tableToolbar = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 550,\r\n    fontSize: \"2rem\"\r\n  },\r\n  toolbarContainer: {\r\n    padding: theme.spacing(3, 1)\r\n  }\r\n}));\r\n\r\nexport default function Toolbar(props) {\r\n    const [isSubmitting,setSubmitting] = useState(false);\r\n    const [rows,setAgents] = React.useState([])\r\n    const bybId = useSelector(state => state.bybId)\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        fetchAgents({bybId,setAgents});\r\n      \r\n          return () => {\r\n            \r\n          }\r\n        }, [bybId])\r\n    const [cluster,setCluster] = useState(0);\r\n\r\n\r\n    const handleClusters = () =>{\r\n        setSubmitting(true)\r\n\r\n        console.log(rows)\r\n        console.log(cluster)\r\n        if(cluster>rows.length && cluster===0){\r\n          console.log('oops,this being called')\r\n            setSubmitting(false)\r\n            setCluster(0)\r\nreturn;\r\n        }\r\n        const clusterData = JSON.stringify({\r\n            BybID:bybId,\r\n            NumberOfCluster: cluster\r\n        })\r\n        postCluster({clusterData,enqueueSnackbar,setSubmitting})\r\nsetCluster(0)\r\n      }\r\n  const classes = tableToolbar();\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      className={classes.toolbarContainer}\r\n    >\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" >\r\n        <Typography\r\n          variant=\"h5\"\r\n          component={\"h6\"}\r\n          gutterBottom\r\n          className={classes.title}\r\n        >\r\n          Cluster\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={2} container>\r\n          <Typography variant=\"h6\">No. of Clusters :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"flex-start\">\r\n          <TextField\r\n            variant=\"outlined\"\r\n            style={{ maxWidth: 200, marginRight: 30 }}\r\n            margin=\"dense\"\r\n            onChange={e=>setCluster(e.target.value)}\r\n            type={'number'}\r\n            min={0}\r\n            max={rows.length}\r\n            helperText=\"Must be less than no. of Agents Added to your account\"\r\n\r\n          />\r\n          <ReactButton variant=\"contained\"         disableFocusRipple={true}\r\n                        disableElevation={true}\r\n                        type=\"submit\"\r\n                        onClick={handleClusters}\r\n\r\n style={{marginTop:6,\r\n    maxWidth: 180}}>\r\n  {isSubmitting ? (\r\n                          <CircularProgress\r\n                            style={{\r\n                              height: \"20px\",\r\n                              width: \"20px\",\r\n                              color: \"#fff\"\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          'Create Clusters'\r\n                        )}\r\n </ReactButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={3} container alignItems=\"center\">\r\n          <Typography variant=\"h6\">Total Deliveries :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"center\">\r\n          <Typography variant=\"h4\" component=\"h5\">23</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","//basic dependencies\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport red from '@material-ui/core/colors/indigo';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\n//dependencies for modal\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport React, { Component, useState,useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { genetateOverview } from 'helpers/NetworkRequest';\r\nimport { getComparator, stableSort, StyledTableCell, StyledTableRow } from '../tableHelpers/helpers';\r\nimport EnhancedTableHead from './tableHead';\r\n//divided component to make them one\r\nimport EnhancedTableToolbar from './toolbar';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    padding:theme.spacing(3)\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    paddingTop:20\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  avatar: {\r\n    color: '#ffffff',\r\n    backgroundColor:red[700],\r\n  },\r\n}));\r\n\r\nexport default function AgentTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('AgentID');\r\n  const [page, setPage] = React.useState(0);\r\n  const [agentid, setagentid] = React.useState('');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [isLoading,setLoading] = useState(false);\r\n\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [rows,setClusters] = React.useState([])\r\n  const bybId = useSelector(state => state.bybId);\r\n  const headCells = [\r\n    { id: 'clusterid', numeric: true, disablePadding: false, label: 'Cluster ID' },\r\n    { id: 'deliveryAgentID', numeric: true, disablePadding: false, label: 'Agent ID' },\r\n    { id: 'totalDeliveries', numeric: false, disablePadding: false, label: 'Deliveries in Cluster' },\r\n    // { id: 'Expected Distance', numeric: false, disablePadding: false, label: 'Type' },\r\n    // { id: 'Observed Distance', numeric: true, disablePadding: false, label: 'Phone Number' },\r\n    // { id: 'action', numeric: true, disablePadding: false, label: 'Action' },\r\n\r\n  ];\r\n\r\n\r\n  useEffect( () => {\r\n    genetateOverview({bybId, setClusters})\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [bybId])\r\n\r\n  \r\n\r\n  //this function set the state for sorting information\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n  //function for page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  //function for row change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n\r\n//telling how many rows can come into this page\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  return (\r\n    <>\r\n   <Helmet>\r\n        <title>Agents</title>\r\n        <meta name=\"description\" content=\"List of Agents Delivering your deliveries\"  />\r\n      </Helmet>\r\n \r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar/>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"Agents\"\r\n            aria-label=\"Agent Data\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {rows && (\r\n                stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => {\r\n                  return (\r\n                    <>\r\n                    <StyledTableRow\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n               <StyledTableCell align=\"center\">{row.clusterid}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deliveryAgentID}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalDeliveries}</StyledTableCell>\r\n              {/* <StyledTableCell align=\"center\">{row.PhoneNumber}</StyledTableCell>\r\n              <StyledTableCell align=\"center\" style={{cursor:'pointer',color:'blue'}} onClick={()=>handleOpen(row.bybid)}>View</StyledTableCell> */}\r\n                    </StyledTableRow>\r\n                    </>\r\n                  );\r\n                })\r\n              )\r\n                }\r\n              {emptyRows > 0 && (\r\n                <TableRow >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      \r\n    </div>\r\n   \r\n  </>\r\n  );\r\n}\r\n"],"sourceRoot":""}