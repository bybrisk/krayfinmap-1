{"version":3,"sources":["views/app/application/cluster/clusterMap.js","components/application/deliveryTable/clusterDeliveries.js","components/application/clusterTable/tableHead.js","components/application/clusterTable/toolbar.js","components/application/clusterTable/table.js"],"names":["useStyles","makeStyles","theme","listItem","paddingTop","paddingBottom","avatar","height","width","borderRadius","iconContainer","minWidth","cardContainer","position","top","right","maxWidth","maxHeight","zIndex","overflow","background","textAlign","transition","boxShadow","display","alignItems","justifyContent","AnyReactComponent","color","style","PendingIcon","PubNub","publishKey","subscribeKey","ClusterMap","enqueueSnackbar","useSnackbar","classes","useState","clusters","setClusters","isLoading","setLoading","pendingDeliveries","setDelivery","channels","pubnub","usePubNub","lat","lng","center","bybId","useSelector","state","zoom","setZoom","handleMessage","event","message","console","log","useEffect","fetchClusters","addListener","subscribe","name","content","className","id","aria-label","length","marginTop","map","item","index","button","key","deliveryAgentName","component","Link","to","pathname","clusterID","clusterid","variant","primary","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onChange","bounds","clusterItem","geometry","latitude","longitude","text","filter","_source","deliveryStatus","filterLength","props","array","ClusterDeliveries","location","history","useHistory","fetchClusterDeliveries","React","rows","fallback","onClick","goBack","EnhancedTableHead","order","orderBy","onRequestSort","headCells","TableHead","TableRow","headCell","align","padding","disablePadding","sortDirection","TableSortLabel","active","direction","property","label","visuallyHidden","tableToolbar","title","fontWeight","fontSize","toolbarContainer","spacing","Toolbar","totaldeliveries","isSubmitting","setSubmitting","setAgents","fetchAgents","setCluster","Grid","container","justify","xs","md","Typography","gutterBottom","marginBottom","lg","disableFocusRipple","disableElevation","type","clusterData","JSON","stringify","BybID","NumberOfCluster","postCluster","CircularProgress","root","paper","table","border","clip","margin","backgroundColor","red","memo","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","genetateOverview","emptyRows","Math","min","Helmet","Paper","calculatedlength","i","totalDeliveries","calculatedLength","TableContainer","Table","aria-labelledby","rowCount","numeric","TableBody","stableSort","getComparator","slice","row","tabIndex","deliveryAgentID","clusterDistance","clusterTime","distanceObserved","toFixed","averageWeight","TableCell","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value"],"mappings":"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","file":"static/js/views-error.2dbb4a60.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\r\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CircularLoader from 'components/application/Loader/circularLoader';\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\nimport {useSelector} from 'react-redux'\r\nimport { fetchClusters } from \"helpers/NetworkRequest\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider, usePubNub } from 'pubnub-react';\r\n\r\nimport { Helmet } from \"react-helmet\";\r\nimport {Link} from 'react-router-dom'\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem:{\r\npaddingTop:0,\r\npaddingBottom:0,\r\n  },\r\n  avatar:{\r\n    height:20,\r\n    width:20,\r\n    borderRadius:'50%',\r\n    \r\n  },\r\n  iconContainer:{\r\n    minWidth:30\r\n  },\r\n  cardContainer:{\r\n    position: \"absolute\",\r\n    top:150,\r\n    right:45,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    zIndex:60,\r\n    overflow:'scroll',\r\n    background:'#fff',\r\n    textAlign: \"left\",\r\n    borderRadius: 10,\r\n    transition: \"all 0.4s\",\r\n    boxShadow: \"0px 0px 120px -25px rgba(0, 0, 0, 0.5)\",\r\n    display:'flex',\r\n    alignItems: \"flex-start\",justifyContent:\"center\",minWidth:100\r\n  },\r\n}));\r\n\r\nconst AnyReactComponent = ({ color }) => (\r\n  <div>\r\n    <RoomRoundedIcon style={{ color: color,height:20,width:20 }} />\r\n  </div>\r\n);\r\n\r\nconst PendingIcon = ({ color }) => (\r\n  <div>\r\n    <ShoppingBasketIcon style={{ color: 'darkgoldenrod',height:20,width:20 }} />\r\n  </div>\r\n);\r\nconst pubnub = new PubNub({\r\n  publishKey: 'pub-c-b62c8c92-592d-4472-bee9-03e3ccf8645b',\r\n  subscribeKey: 'sub-c-ad9893f0-6907-11eb-b914-eedc703588a5',\r\n  // uuid: 'myUniqueUUID'\r\n});\r\nconst ClusterMap = () => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const classes = useStyles();\r\n  const [clusters,setClusters] = useState(null)\r\n  const [isLoading,setLoading] = useState(false);\r\n  const [pendingDeliveries,setDelivery] = useState(null);\r\n        const [channels] = useState(['6038bd0fc35e3b8e8bd9f81a']);\r\n\r\n  const pubnub = usePubNub();\r\n  \r\n  const [center, setCenter] = useState({\r\n    lat: 23.202357,\r\n    lng: 77.414254\r\n  });\r\n  const bybId = useSelector(state => state.bybId)\r\n  const [zoom, setZoom] = useState(11);\r\n  const handleMessage = event => {\r\n    const message = event.message;\r\n    console.log(message);\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n      fetchClusters({bybId, setClusters,enqueueSnackbar,setLoading,setDelivery});\r\n      return () => {\r\n\r\n       }\r\n  }, [bybId])\r\n  console.log(pendingDeliveries);\r\n  useEffect(() => {\r\n    pubnub.addListener({ message: handleMessage });\r\n    pubnub.subscribe({ channels });\r\n  }, [pubnub, channels]);\r\n\r\n\r\n\r\n  return (\r\n      <>\r\n           <Helmet>\r\n        <title>Cluster Summary</title>\r\n        <meta name=\"description\" content=\"Visual Representation of Deliveries of your account Made Simple\"  />\r\n      </Helmet>\r\n      {isLoading?<CircularLoader/>:(\r\n        <div style={{ height: \"90vh\", width: \"100%\" }}>\r\n    <div className={classes.cardContainer} id=\"bright\">\r\n  {isLoading?(<CircularProgress\r\n   style={{height: \"30px\",\r\n     width: \"30px\",\r\n   color: \"#4caf50\"\r\n    }}\r\n       />\r\n       ):(\r\n        <List aria-label=\"Cluster display\">\r\n      \r\n      {clusters?.length===0 && <ListItem className={classes.listItem} style={{marginTop:23,color:'#057g78'}}>No Clusters Present</ListItem>}\r\n      {clusters?.map((item,index)=>{\r\n        return   <ListItem button key={item[0].deliveryAgentName} component={Link} to={{ pathname: '/dashboard/clusterDeliveries', state: { clusterID: item[0].clusterid} }} className={classes.listItem}>\r\n        <ListItemIcon className={classes.iconContainer}>\r\n    <Paper className={classes.avatar} style={{background:item[0].color}} variant={'elevation'}></Paper>\r\n        </ListItemIcon>\r\n        <ListItemText primary={item[0].deliveryAgentName} />\r\n      </ListItem>\r\n   \r\n      })}\r\n        \r\n      </List>\r\n    \r\n       )}\r\n      </div>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyDSl1BOkFlpEiOs3PIavj24cMDo0tDBOIQ\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n        }}\r\n        \r\n      >\r\n        {clusters?.map((item) => {\r\n          return item.map((clusterItem) => {\r\n            return (\r\n              <AnyReactComponent\r\n                lat={clusterItem.geometry.latitude}\r\n                lng={clusterItem.geometry.longitude}\r\n                color={clusterItem.color}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n          });\r\n        })}\r\n\r\n        {clusters===null && pendingDeliveries?.filter(item=>item._source.deliveryStatus==='Pending')?.map((clusterItem) => {\r\n            return (\r\n              <PendingIcon\r\n                lat={clusterItem._source.latitude}\r\n                lng={clusterItem._source.longitude}\r\n                color={'darkgoldenrod'}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n        })}\r\n      </GoogleMapReact>\r\n\r\n    </div>\r\n \r\n      )\r\n\r\n}\r\n    </>);\r\n};\r\nexport default ClusterMap;\r\n","//basic dependencies\r\nimport red from '@material-ui/core/colors/indigo';\r\n//dependencies for modal\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport TableContainer from './tableContainer';\r\nimport React, { useEffect, Suspense} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\nimport Loader from '../Loader/Loader'\r\nimport { Helmet } from \"react-helmet\";\r\n// import AgentDetail from '../AgentDetails'\r\nimport { fetchClusterDeliveries } from 'helpers/NetworkRequest';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n//divided component to make them one\r\n\r\n\r\n\r\n//fetchDeliveryDetails to be replaced with get all deliveries\r\n\r\n\r\n\r\n\r\nconst filterLength = (props) => {\r\nconst {array,filter} = props;\r\nreturn array.filter(item=>item._source.deliveryStatus===filter).length\r\n}\r\n\r\nexport default function ClusterDeliveries(props) {\r\n    console.log(props.location,props.location.state,\"--------------------------------\")\r\n    const history = useHistory()\r\nconst clusterID = props.location.state!==null && props.location.state.clusterID\r\nconsole.log(clusterID)\r\n    useEffect(() => {\r\n        fetchClusterDeliveries({clusterID,setDelivery});\r\n  }, [clusterID])\r\n\r\n  const [rows,setDelivery] = React.useState([])\r\n   \r\nconst filterStats = {\r\n  DeliveryDelivered:filterLength({array:rows,filter:'confirmed'}),\r\n  DeliveryCancelled:filterLength({array:rows,filter:'cancelled'}),\r\n  DeliveryPending:filterLength({array:rows,filter:'pending'}),\r\n  DeliveryTransit:filterLength({array:rows,filter:'transit'})\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n     <Helmet>\r\n        <title>Deliveries</title>\r\n        <meta name=\"description\" content=\"List of Deliveries of your account\"  />\r\n      </Helmet>\r\n <Suspense fallback={<Loader />}>\r\n<ArrowBackIcon onClick={()=>history.goBack()}/>\r\n  <TableContainer rows={rows} setDelivery={setDelivery} />\r\n   </Suspense>\r\n  </>\r\n  );\r\n}\r\n","import TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { StyledTableCell } from '../tableHelpers/helpers';\r\n  \r\n  //this is function to desplay table heads\r\n  function EnhancedTableHead(props) {\r\n    const { classes, order, orderBy, onRequestSort ,headCells} = props;\r\n    \r\n    //helper function to call onRequestSort(handleRequestSort)\r\n    const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n    };\r\n  \r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {headCells.map((headCell) => (\r\n            <StyledTableCell\r\n              key={headCell.id}\r\n              align={'center'}\r\n              padding={headCell.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : 'asc'}\r\n                onClick={createSortHandler(headCell.id)}\r\n              >\r\n                {headCell.label}\r\n                {orderBy === headCell.id ? (\r\n                  <span className={classes.visuallyHidden}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </StyledTableCell>\r\n          ))}  \r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n  \r\n  EnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n  };\r\n  \r\n\r\n  export default EnhancedTableHead","import React,{useState,useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {postCluster,fetchAgents} from 'helpers/NetworkRequest'\r\nimport {useSelector} from \"react-redux\";\r\nimport { useSnackbar } from 'notistack';\r\nimport ReactButton from \"../button/button\";\r\n\r\n\r\n\r\n\r\nconst tableToolbar = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 550,\r\n    fontSize: \"2rem\"\r\n  },\r\n  toolbarContainer: {\r\n    padding: theme.spacing(3, 1)\r\n  }\r\n}));\r\n\r\nexport default function Toolbar(props) {\r\n  console.log(props)\r\n  const {setClusters,totaldeliveries} = props\r\n    const [isSubmitting,setSubmitting] = useState(false);\r\n    const [rows,setAgents] = React.useState([])\r\n    const bybId = useSelector(state => state.bybId)\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        fetchAgents({bybId,setAgents});\r\n      \r\n          return () => {\r\n            \r\n          }\r\n        }, [bybId])\r\n    const [cluster,setCluster] = useState(null);\r\n\r\n\r\n    const handleClusters = () =>{\r\n        setSubmitting(true)\r\n\r\n        // console.log(rows,cluster>rows.length,cluster===0,\"---------------\")\r\n        // console.log(cluster,\"-------------------\")\r\n        // if(cluster>rows.length || cluster===0){\r\n          // console.log('This cluster cannot be made')\r\n          //   setSubmitting(false)\r\n          //   setCluster(null)\r\n// return;\r\n//         }\r\n// else{\r\n  const clusterData = JSON.stringify({\r\n    BybID:bybId,\r\n    NumberOfCluster:0\r\n})\r\npostCluster({clusterData,enqueueSnackbar,setSubmitting,bybId, setCluster})\r\n// }\r\n    \r\n// setCluster(0)\r\n      }\r\n  const classes = tableToolbar();\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      className={classes.toolbarContainer}\r\n    >\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" >\r\n        <Typography\r\n          variant=\"h5\"\r\n          component={\"h6\"}\r\n          gutterBottom\r\n          className={classes.title}\r\n        >\r\n          Cluster\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={2} container>\r\n          <Typography variant=\"h6\">No. of Clusters :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"flex-start\">\r\n          {/* <TextField\r\n            variant=\"outlined\"\r\n            style={{ maxWidth: 200, marginRight: 30 }}\r\n            margin=\"dense\"\r\n            onChange={e=>setCluster(e.target.value)}\r\n            type={'number'}\r\n            min={0}\r\n            max={rows.length}\r\n            helperText=\"Must be less than no. of Agents Added to your account\"\r\n\r\n          /> */}\r\n          <ReactButton variant=\"contained\"         disableFocusRipple={true}\r\n                        disableElevation={true}\r\n                        type=\"submit\"\r\n                        onClick={handleClusters}\r\n\r\n style={{marginTop:6,\r\n    maxWidth: 180}}>\r\n  {isSubmitting ? (\r\n                          <CircularProgress\r\n                            style={{\r\n                              height: \"20px\",\r\n                              width: \"20px\",\r\n                              color: \"#fff\"\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          'Create Clusters'\r\n                        )}\r\n </ReactButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={3} container alignItems=\"center\">\r\n          <Typography variant=\"h6\">Total Deliveries :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"center\">\r\n          <Typography variant=\"h4\" component=\"h5\">{totaldeliveries}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","//basic dependencies\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport red from '@material-ui/core/colors/indigo';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\n//dependencies for modal\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport React, { Component, useState,useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { genetateOverview } from 'helpers/NetworkRequest';\r\nimport { getComparator, stableSort, StyledTableCell, StyledTableRow } from '../tableHelpers/helpers';\r\nimport EnhancedTableHead from './tableHead';\r\n//divided component to make them one\r\nimport EnhancedTableToolbar from './toolbar';\r\nimport CircularLoader from '../Loader/circularLoader';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    padding:theme.spacing(3)\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    paddingTop:20\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  avatar: {\r\n    color: '#ffffff',\r\n    backgroundColor:red[700],\r\n  },\r\n}));\r\n\r\nfunction ClusterTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('clusterTime');\r\n  const [page, setPage] = React.useState(0);\r\n  const [agentid, setagentid] = React.useState('');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [isLoading,setLoading] = useState(false);\r\n\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [rows,setClusters] = React.useState([])\r\n  \r\n  const bybId = useSelector(state => state.bybId);\r\n  const headCells = [\r\n    { id: 'Agent_Name', numeric: true, disablePadding: false, label: 'Agent Name' },\r\n    { id: 'deliveryAgentID', numeric: true, disablePadding: false, label: 'Agent ID' },\r\n    { id: 'totalDeliveries', numeric: false, disablePadding: false, label: 'Deliveries in Cluster' },\r\n    { id: 'clusterDistance', numeric: false, disablePadding: false, label: 'Cluster Distance' },\r\n    { id: 'clusterTime', numeric: false, disablePadding: false, label: 'Cluster Time' },\r\n    { id: 'distanceObserved', numeric: true, disablePadding: false, label: 'Distance Observed' },\r\n    { id: 'averageWeight', numeric: true, disablePadding: false, label: 'Total Weight' },\r\n\r\n  ];\r\n\r\n\r\n\r\n  useEffect( () => {\r\n    genetateOverview({bybId, setClusters,setLoading})\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [bybId])\r\n\r\n  \r\n\r\n  //this function set the state for sorting information\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n  //function for page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const calculatedLength = () =>{\r\n    let calculatedlength=0;\r\n      for(let i=0;i<rows.length;i++){\r\n        console.log(rows[i]?.totalDeliveries,calculatedlength,\"====---===---===---==\")\r\ncalculatedlength+=rows[i]?.totalDeliveries\r\n    }\r\n    return calculatedlength;\r\n  }\r\n\r\n  //function for row change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n\r\n//telling how many rows can come into this page\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  return (\r\n    <>\r\n   <Helmet>\r\n        <title>Agents</title>\r\n        <meta name=\"description\" content=\"List of Agents Delivering your deliveries\"  />\r\n      </Helmet>\r\n {isLoading ? (\r\n   <CircularLoader/>\r\n ):(<div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar totaldeliveries={calculatedLength()} setClusters={setClusters} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"Agents\"\r\n            aria-label=\"Agent Data\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {rows && (\r\n                stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => {\r\n                  return (\r\n                    <>\r\n                    <StyledTableRow\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n               <StyledTableCell align=\"center\">{row.deliveryAgentName}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deliveryAgentID}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalDeliveries}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.clusterDistance}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.clusterTime}</StyledTableCell>\r\n\r\n               <StyledTableCell align=\"center\">{(row.distanceObserved/1000).toFixed(2)} KM</StyledTableCell>\r\n               <StyledTableCell align=\"center\">{row.averageWeight}</StyledTableCell>\r\n\r\n              {/*<StyledTableCell align=\"center\" style={{cursor:'pointer',color:'blue'}} onClick={()=>handleOpen(row.bybid)}>View</StyledTableCell> */}\r\n                    </StyledTableRow>\r\n                    </>\r\n                  );\r\n                })\r\n              )\r\n                }\r\n              {emptyRows > 0 && (\r\n                <TableRow >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      \r\n    </div>\r\n   )}\r\n    \r\n  </>\r\n  );\r\n}\r\n\r\nexport default React.memo(ClusterTable)"],"sourceRoot":""}