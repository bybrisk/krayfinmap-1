{"version":3,"sources":["views/app/application/cluster/clusterMap.js","components/application/deliveryTable/clusterDeliveries.js","components/application/clusterTable/tableHead.js","components/application/clusterTable/toolbar.js","components/application/clusterTable/table.js"],"names":["DeliveryDetails","React","lazy","useStyles","makeStyles","theme","listItem","paddingTop","paddingBottom","avatar","height","width","borderRadius","iconContainer","minWidth","cardContainer","position","top","right","maxWidth","maxHeight","zIndex","overflow","background","textAlign","transition","boxShadow","display","alignItems","justifyContent","AnyReactComponent","color","onClick","style","PendingIcon","DeliveryManIcon","PubNub","publishKey","subscribeKey","memo","enqueueSnackbar","useSnackbar","useState","open","setOpen","user","useSelector","state","console","log","classes","clusters","setClusters","isLoading","setLoading","pendingDeliveries","setDelivery","Map","tracking","setTracking","channels","pubnub","usePubNub","lat","lng","center","bybId","zoom","setZoom","deliveryID","setdeliveryID","handleOpen","id","handleClose","useEffect","fetchClusters","addListener","status","statusEvent","message","channel","publisher","set","agent","updateTracking","presence","presenceEvent","subscribe","name","content","className","aria-label","length","marginTop","map","item","index","button","key","deliveryAgentName","component","Link","to","pathname","clusterID","clusterid","variant","primary","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onChange","bounds","clusterItem","geometry","latitude","longitude","deliveryid","text","filter","_source","deliveryStatus","_id","values","Lat","Log","onClose","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","flexDirection","in","fontSize","padding","margin","cursor","filterLength","props","array","ClusterDeliveries","location","history","useHistory","fetchClusterDeliveries","rows","fallback","goBack","EnhancedTableHead","order","orderBy","onRequestSort","headCells","TableHead","TableRow","headCell","align","disablePadding","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","tableToolbar","title","fontWeight","toolbarContainer","spacing","Toolbar","totaldeliveries","isSubmitting","setSubmitting","setAgents","fetchAgents","setCluster","Grid","container","justify","xs","md","Typography","gutterBottom","marginBottom","disableFocusRipple","disableElevation","type","clusterData","JSON","stringify","BybID","NumberOfCluster","postCluster","CircularProgress","lg","root","paper","table","border","clip","backgroundColor","red","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","genetateOverview","emptyRows","Math","min","Helmet","Paper","calculatedlength","i","totalDeliveries","calculatedLength","TableContainer","Table","rowCount","numeric","TableBody","stableSort","getComparator","slice","row","tabIndex","deliveryAgentID","clusterDistance","clusterTime","distanceObserved","toFixed","averageWeight","TableCell","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value"],"mappings":"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","file":"static/js/views-error.318a4485.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\r\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CircularLoader from 'components/application/Loader/circularLoader';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\nimport {useSelector} from 'react-redux'\r\nimport { fetchClusters } from \"helpers/NetworkRequest\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider, usePubNub } from 'pubnub-react';\r\n\r\nimport { Helmet } from \"react-helmet\";\r\nimport {Link} from 'react-router-dom'\r\nconst DeliveryDetails = React.lazy(() =>\r\n  import(/* webpackChunkName: \"Delivery-Details\" */ 'views/app/application/delivery/deliveryDetails')\r\n);\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem:{\r\npaddingTop:0,\r\npaddingBottom:0,\r\n  },\r\n  avatar:{\r\n    height:20,\r\n    width:20,\r\n    borderRadius:'50%',\r\n    \r\n  },\r\n  iconContainer:{\r\n    minWidth:30\r\n  },\r\n  cardContainer:{\r\n    position: \"absolute\",\r\n    top:150,\r\n    right:45,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    zIndex:60,\r\n    overflow:'scroll',\r\n    background:'#fff',\r\n    textAlign: \"left\",\r\n    borderRadius: 10,\r\n    transition: \"all 0.4s\",\r\n    boxShadow: \"0px 0px 120px -25px rgba(0, 0, 0, 0.5)\",\r\n    display:'flex',\r\n    alignItems: \"flex-start\",justifyContent:\"center\",minWidth:100\r\n  },\r\n}));\r\n\r\nconst AnyReactComponent = ({ color,onClick }) => (\r\n  <div>\r\n    <RoomRoundedIcon onClick={onClick} style={{ color: color,height:20,width:20 }} />\r\n  </div>\r\n);\r\n\r\nconst PendingIcon = ({ onClick }) => (\r\n  <div>\r\n    <ShoppingBasketIcon onClick={onClick} style={{ color: 'darkgoldenrod',height:20,width:20 }} />\r\n  </div>\r\n);\r\n\r\nconst DeliveryManIcon = () => (\r\n  <div>\r\n    <LocalShippingIcon style={{ color: 'blue',height:20,width:20 }} />\r\n  </div>\r\n);\r\nconst pubnub = new PubNub({\r\n  publishKey: 'pub-c-b62c8c92-592d-4472-bee9-03e3ccf8645b',\r\n  subscribeKey: 'sub-c-ad9893f0-6907-11eb-b914-eedc703588a5',\r\n  // uuid: 'myUniqueUUID'\r\n});\r\nconst ClusterMap = () => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [open, setOpen] = React.useState(false);\r\n    const user = useSelector(state => state.user)\r\nconsole.log(user);\r\n  const classes = useStyles();\r\n  const [clusters,setClusters] = useState(null)\r\n  const [isLoading,setLoading] = useState(false);\r\n  const [pendingDeliveries,setDelivery] = useState(null);\r\n  const [tracking, setTracking] = useState(new Map());     \r\n  const [channels] = useState(['6038bd0fc35e3b8e8bd9f81a']);\r\n  const updateTracking = (message) => {\r\n    setTracking(new Map(tracking.set(message.agent,message)));\r\n  }\r\n  const pubnub = usePubNub();\r\n  \r\n  const [center, setCenter] = useState({\r\n    lat: 23.202357,\r\n    lng: 77.414254\r\n  });\r\n  const bybId = useSelector(state => state.bybId)\r\n  const [zoom, setZoom] = useState(11);\r\n  const [deliveryID, setdeliveryID] = React.useState('');\r\n\r\n  const handleMessage = event => {\r\n    const message = event.category;\r\n    // console.log(event);\r\n\r\n  };\r\n  const handleOpen = (id) => {\r\n    setdeliveryID(id);\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    // setTimeout(() => {\r\n    //   fetchAccountDetails({dispatch})  \r\n    // }, 1000);\r\n\r\n  };\r\n  useEffect(() => {\r\n    setLoading(true)\r\n      fetchClusters({bybId, setClusters,enqueueSnackbar,setLoading,setDelivery});\r\n      return () => {\r\n\r\n       }\r\n  }, [bybId])\r\n  console.log(clusters);\r\n\r\n  const throttle = (fn,delay) => {\r\n    let inThrottle = false;\r\n  \r\n    return args => {\r\n      if (inThrottle) {\r\n        return;\r\n      }\r\n  \r\n      inThrottle = true;\r\n      fn(args);\r\n      setTimeout(() => {\r\n        inThrottle = false;\r\n      }, delay);\r\n    };\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    pubnub.addListener({\r\n      status: function(statusEvent) {\r\n        // console.log(statusEvent)\r\n          // if (statusEvent.category === \"PNConnectedCategory\") {\r\n          //   handleMessage()\r\n          // }\r\n      },\r\n      message: function({ channel, message, publisher }) {\r\n\r\nif(message){\r\n\r\n updateTracking(message);\r\n\r\n\r\n  // }, 3000)\r\n}\r\n      },\r\n      presence: function(presenceEvent) {\r\n          // This is where you handle presence. Not important for now :)\r\n      }\r\n  });\r\n\r\n  pubnub.subscribe({\r\n      channels: ['6038bd0fc35e3b8e8bd9f81a']\r\n  });\r\n  }, [pubnub, channels]);\r\n\r\n\r\n  return (\r\n      <>\r\n           <Helmet>\r\n        <title>Cluster Summary</title>\r\n        <meta name=\"description\" content=\"Visual Representation of Deliveries of your account Made Simple\"  />\r\n      </Helmet>\r\n      {isLoading?<CircularLoader/>:(\r\n        <div style={{ height: \"90vh\", width: \"100%\" }}>\r\n    <div className={classes.cardContainer} id=\"bright\">\r\n  {isLoading?(<CircularProgress\r\n   style={{height: \"30px\",\r\n     width: \"30px\",\r\n   color: \"#4caf50\"\r\n    }}\r\n       />\r\n       ):(\r\n        <List aria-label=\"Cluster display\">\r\n      \r\n      {clusters?.length===0 && <ListItem className={classes.listItem} style={{marginTop:23,color:'#057g78'}}>No Clusters Present</ListItem>}\r\n      {clusters?.map((item,index)=>{\r\n        return   <ListItem button key={item[0].deliveryAgentName} component={Link} to={{ pathname: '/dashboard/clusterDeliveries', state: { clusterID: item[0].clusterid} }} className={classes.listItem}>\r\n        <ListItemIcon className={classes.iconContainer}>\r\n    <Paper className={classes.avatar} style={{background:item[0].color}} variant={'elevation'}></Paper>\r\n        </ListItemIcon>\r\n        <ListItemText primary={item[0].deliveryAgentName} />\r\n      </ListItem>\r\n   \r\n      })}\r\n        \r\n      </List>\r\n    \r\n       )}\r\n      </div>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyDSl1BOkFlpEiOs3PIavj24cMDo0tDBOIQ\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n        }}\r\n        \r\n      >\r\n        {clusters?.map((item) => {\r\n          return item.map((clusterItem) => {\r\n            return (\r\n              <AnyReactComponent\r\n                lat={clusterItem.geometry.latitude}\r\n                lng={clusterItem.geometry.longitude}\r\n                color={clusterItem.color}\r\n                onClick={()=>handleOpen(clusterItem.deliveryid)}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n          });\r\n        })}\r\n\r\n        {clusters===null && pendingDeliveries?.filter(item=>item._source.deliveryStatus==='Pending')?.map((clusterItem) => {\r\n            return (\r\n              <PendingIcon\r\n                lat={clusterItem._source.latitude}\r\n                lng={clusterItem._source.longitude}\r\n                onClick={()=>handleOpen(clusterItem._id)}\r\n                color={'darkgoldenrod'}\r\n\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n        })}\r\n        {\r\n          [...tracking.values()].map(item=>{\r\n            return(\r\n              <DeliveryManIcon\r\n                lat={item.Lat}\r\n                lng={item.Log}\r\n                // onClick={()=>handleOpen(clusterItem._id)}\r\n                color={'#000'}\r\n\r\n                text=\"My Marker\"\r\n              />    \r\n            )\r\n          })\r\n         \r\n        }\r\n\r\n      </GoogleMapReact>\r\n\r\n    </div>\r\n \r\n      )\r\n\r\n}\r\n<Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"Deliveries\"\r\n          aria-describedby=\"Deliveries\"\r\n          closeAfterTransition\r\n                  BackdropComponent={Backdrop}\r\n                  BackdropProps={{\r\n                      timeout: 400,\r\n                  }}\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            flexDirection:'column',\r\n            background:'#ffffff'\r\n          }}\r\n        >\r\n                        <Grow in={open} timeout={250}>\r\n  \r\n        <section style={{background:'#ffffff',width:'100%',height:'100%'}}> \r\n        <div style={{fontSize:40,textAlign:'right',padding:'0 30px',margin:0}}>    <span style={{cursor:'pointer'}} onClick={handleClose} >x</span>\r\n  </div>\r\n          <DeliveryDetails id={deliveryID} handleClose={handleClose}/>\r\n        </section>\r\n        </Grow>\r\n        </Modal>\r\n \r\n    </>);\r\n};\r\nexport default React.memo(ClusterMap);\r\n","//basic dependencies\r\nimport red from '@material-ui/core/colors/indigo';\r\n//dependencies for modal\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport TableContainer from './tableContainer';\r\nimport React, { useEffect, Suspense} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\nimport Loader from '../Loader/Loader'\r\nimport { Helmet } from \"react-helmet\";\r\n// import AgentDetail from '../AgentDetails'\r\nimport { fetchClusterDeliveries } from 'helpers/NetworkRequest';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n//divided component to make them one\r\n\r\n\r\n\r\n//fetchDeliveryDetails to be replaced with get all deliveries\r\n\r\n\r\n\r\n\r\nconst filterLength = (props) => {\r\nconst {array,filter} = props;\r\nreturn array.filter(item=>item._source.deliveryStatus===filter).length\r\n}\r\n\r\nexport default function ClusterDeliveries(props) {\r\n    console.log(props.location,props.location.state,\"--------------------------------\")\r\n    const history = useHistory()\r\nconst clusterID = props.location.state!==null && props.location.state.clusterID\r\nconsole.log(clusterID)\r\n    useEffect(() => {\r\n        fetchClusterDeliveries({clusterID,setDelivery});\r\n  }, [clusterID])\r\n\r\n  const [rows,setDelivery] = React.useState([])\r\n   \r\nconst filterStats = {\r\n  DeliveryDelivered:filterLength({array:rows,filter:'confirmed'}),\r\n  DeliveryCancelled:filterLength({array:rows,filter:'cancelled'}),\r\n  DeliveryPending:filterLength({array:rows,filter:'pending'}),\r\n  DeliveryTransit:filterLength({array:rows,filter:'transit'})\r\n}\r\nconsole.log(rows);\r\n\r\n  return (\r\n    <>\r\n     <Helmet>\r\n        <title>Deliveries</title>\r\n        <meta name=\"description\" content=\"List of Deliveries of your account\"  />\r\n      </Helmet>\r\n <Suspense fallback={<Loader />}>\r\n<ArrowBackIcon onClick={()=>history.goBack()}/>\r\n  <TableContainer rows={rows} setDelivery={setDelivery} />\r\n   </Suspense>\r\n  </>\r\n  );\r\n}\r\n","import TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { StyledTableCell } from '../tableHelpers/helpers';\r\n  \r\n  //this is function to desplay table heads\r\n  function EnhancedTableHead(props) {\r\n    const { classes, order, orderBy, onRequestSort ,headCells} = props;\r\n    \r\n    //helper function to call onRequestSort(handleRequestSort)\r\n    const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n    };\r\n  \r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {headCells.map((headCell) => (\r\n            <StyledTableCell\r\n              key={headCell.id}\r\n              align={'center'}\r\n              padding={headCell.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : 'asc'}\r\n                onClick={createSortHandler(headCell.id)}\r\n              >\r\n                {headCell.label}\r\n                {orderBy === headCell.id ? (\r\n                  <span className={classes.visuallyHidden}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </StyledTableCell>\r\n          ))}  \r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n  \r\n  EnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n  };\r\n  \r\n\r\n  export default EnhancedTableHead","import React,{useState,useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {postCluster,fetchAgents} from 'helpers/NetworkRequest'\r\nimport {useSelector} from \"react-redux\";\r\nimport { useSnackbar } from 'notistack';\r\nimport ReactButton from \"../button/button\";\r\n\r\n\r\n\r\n\r\nconst tableToolbar = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 550,\r\n    fontSize: \"2rem\"\r\n  },\r\n  toolbarContainer: {\r\n    padding: theme.spacing(3, 1)\r\n  }\r\n}));\r\n\r\nexport default function Toolbar(props) {\r\n  console.log(props)\r\n  const {setClusters,totaldeliveries} = props\r\n    const [isSubmitting,setSubmitting] = useState(false);\r\n    const [rows,setAgents] = React.useState([])\r\n    const bybId = useSelector(state => state.bybId)\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        fetchAgents({bybId,setAgents});\r\n      \r\n          return () => {\r\n            \r\n          }\r\n        }, [bybId])\r\n    const [cluster,setCluster] = useState(null);\r\n\r\n\r\n    const handleClusters = () =>{\r\n        setSubmitting(true)\r\n\r\n        // console.log(rows,cluster>rows.length,cluster===0,\"---------------\")\r\n        // console.log(cluster,\"-------------------\")\r\n        // if(cluster>rows.length || cluster===0){\r\n          // console.log('This cluster cannot be made')\r\n          //   setSubmitting(false)\r\n          //   setCluster(null)\r\n// return;\r\n//         }\r\n// else{\r\n  const clusterData = JSON.stringify({\r\n    BybID:bybId,\r\n    NumberOfCluster:0\r\n})\r\npostCluster({clusterData,enqueueSnackbar,setSubmitting,bybId, setCluster})\r\n// }\r\n    \r\n// setCluster(0)\r\n      }\r\n  const classes = tableToolbar();\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      className={classes.toolbarContainer}\r\n    >\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" >\r\n        <Typography\r\n          variant=\"h5\"\r\n          component={\"h6\"}\r\n          gutterBottom\r\n          className={classes.title}\r\n        >\r\n          Cluster\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid container xs={12} alignItems=\"flex-start\">\r\n\r\n          <ReactButton variant=\"contained\"         disableFocusRipple={true}\r\n                        disableElevation={true}\r\n                        type=\"submit\"\r\n                        onClick={handleClusters}\r\n\r\n style={{marginTop:6,\r\n    maxWidth: 180}}>\r\n  {isSubmitting ? (\r\n                          <CircularProgress\r\n                            style={{\r\n                              height: \"20px\",\r\n                              width: \"20px\",\r\n                              color: \"#fff\"\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          'Create Clusters'\r\n                        )}\r\n </ReactButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={3} container alignItems=\"center\">\r\n          <Typography variant=\"h6\">Total Deliveries :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"center\">\r\n          <Typography variant=\"h4\" component=\"h5\">{totaldeliveries}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","//basic dependencies\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport red from '@material-ui/core/colors/indigo';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\n//dependencies for modal\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport React, { Component, useState,useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { genetateOverview } from 'helpers/NetworkRequest';\r\nimport { getComparator, stableSort, StyledTableCell, StyledTableRow } from '../tableHelpers/helpers';\r\nimport EnhancedTableHead from './tableHead';\r\n//divided component to make them one\r\nimport EnhancedTableToolbar from './toolbar';\r\nimport CircularLoader from '../Loader/circularLoader';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    padding:theme.spacing(3)\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    paddingTop:20\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  avatar: {\r\n    color: '#ffffff',\r\n    backgroundColor:red[700],\r\n  },\r\n}));\r\n\r\nfunction ClusterTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('clusterTime');\r\n  const [page, setPage] = React.useState(0);\r\n  const [agentid, setagentid] = React.useState('');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [isLoading,setLoading] = useState(false);\r\n\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [rows,setClusters] = React.useState([])\r\n  \r\n  const bybId = useSelector(state => state.bybId);\r\n  const headCells = [\r\n    { id: 'Agent_Name', numeric: true, disablePadding: false, label: 'Agent Name' },\r\n    { id: 'deliveryAgentID', numeric: true, disablePadding: false, label: 'Agent ID' },\r\n    { id: 'totalDeliveries', numeric: false, disablePadding: false, label: 'Deliveries in Cluster' },\r\n    { id: 'clusterDistance', numeric: false, disablePadding: false, label: 'Cluster Distance' },\r\n    { id: 'clusterTime', numeric: false, disablePadding: false, label: 'Cluster Time' },\r\n    { id: 'distanceObserved', numeric: true, disablePadding: false, label: 'Distance Observed' },\r\n    { id: 'averageWeight', numeric: true, disablePadding: false, label: 'Total Weight' },\r\n\r\n  ];\r\n\r\n\r\n\r\n  useEffect( () => {\r\n    genetateOverview({bybId, setClusters,setLoading})\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [bybId])\r\n\r\n  \r\n\r\n  //this function set the state for sorting information\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n  //function for page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const calculatedLength = () =>{\r\n    let calculatedlength=0;\r\n      for(let i=0;i<rows.length;i++){\r\n        console.log(rows[i]?.totalDeliveries,calculatedlength,\"====---===---===---==\")\r\ncalculatedlength+=rows[i]?.totalDeliveries\r\n    }\r\n    return calculatedlength;\r\n  }\r\n\r\n  //function for row change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n\r\n//telling how many rows can come into this page\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  return (\r\n    <>\r\n   <Helmet>\r\n        <title>Agents</title>\r\n        <meta name=\"description\" content=\"List of Agents Delivering your deliveries\"  />\r\n      </Helmet>\r\n {isLoading ? (\r\n   <CircularLoader/>\r\n ):(<div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar totaldeliveries={calculatedLength()} setClusters={setClusters} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"Agents\"\r\n            aria-label=\"Agent Data\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {rows && (\r\n                stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => {\r\n                  return (\r\n                    <>\r\n                    <StyledTableRow\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n               <StyledTableCell align=\"center\">{row.deliveryAgentName}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deliveryAgentID}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalDeliveries}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.clusterDistance}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.clusterTime}</StyledTableCell>\r\n\r\n               <StyledTableCell align=\"center\">{(row.distanceObserved/1000).toFixed(2)} KM</StyledTableCell>\r\n               <StyledTableCell align=\"center\">{row.averageWeight}</StyledTableCell>\r\n\r\n              {/*<StyledTableCell align=\"center\" style={{cursor:'pointer',color:'blue'}} onClick={()=>handleOpen(row.bybid)}>View</StyledTableCell> */}\r\n                    </StyledTableRow>\r\n                    </>\r\n                  );\r\n                })\r\n              )\r\n                }\r\n              {emptyRows > 0 && (\r\n                <TableRow >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      \r\n    </div>\r\n   )}\r\n    \r\n  </>\r\n  );\r\n}\r\n\r\nexport default React.memo(ClusterTable)"],"sourceRoot":""}