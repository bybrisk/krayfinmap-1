{"version":3,"sources":["views/app/application/cluster/clusterMap.js","components/application/deliveryTable/clusterDeliveries.js","components/application/clusterTable/tableHead.js","components/application/clusterTable/toolbar.js","components/application/clusterTable/table.js"],"names":["DeliveryDetails","React","lazy","useStyles","makeStyles","theme","listItem","paddingTop","paddingBottom","avatar","height","width","borderRadius","iconContainer","minWidth","cardContainer","position","top","right","maxWidth","maxHeight","zIndex","overflow","background","textAlign","transition","boxShadow","display","alignItems","justifyContent","AnyReactComponent","color","style","PendingIcon","onClick","DeliveryManIcon","PubNub","publishKey","subscribeKey","memo","enqueueSnackbar","useSnackbar","useState","open","setOpen","classes","clusters","setClusters","isLoading","setLoading","pendingDeliveries","setDelivery","Map","tracking","setTracking","channels","pubnub","usePubNub","lat","lng","center","bybId","useSelector","state","zoom","setZoom","deliveryID","setdeliveryID","handleClose","useEffect","fetchClusters","addListener","status","statusEvent","message","channel","publisher","set","agent","updateTracking","presence","presenceEvent","subscribe","name","content","className","id","aria-label","length","marginTop","map","item","index","button","key","deliveryAgentName","component","Link","to","pathname","clusterID","clusterid","variant","primary","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onChange","bounds","clusterItem","geometry","latitude","longitude","text","filter","_source","deliveryStatus","handleOpen","_id","values","Lat","Log","onClose","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","flexDirection","in","fontSize","padding","margin","cursor","filterLength","props","array","ClusterDeliveries","console","log","location","history","useHistory","fetchClusterDeliveries","rows","fallback","goBack","EnhancedTableHead","order","orderBy","onRequestSort","headCells","TableHead","TableRow","headCell","align","disablePadding","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","tableToolbar","title","fontWeight","toolbarContainer","spacing","Toolbar","totaldeliveries","isSubmitting","setSubmitting","setAgents","fetchAgents","setCluster","Grid","container","justify","xs","md","Typography","gutterBottom","marginBottom","disableFocusRipple","disableElevation","type","clusterData","JSON","stringify","BybID","NumberOfCluster","postCluster","CircularProgress","lg","root","paper","table","border","clip","backgroundColor","red","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","genetateOverview","emptyRows","Math","min","Helmet","Paper","calculatedlength","i","totalDeliveries","calculatedLength","TableContainer","Table","rowCount","numeric","TableBody","stableSort","getComparator","slice","row","tabIndex","deliveryAgentID","clusterDistance","clusterTime","distanceObserved","toFixed","averageWeight","TableCell","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value"],"mappings":"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","file":"static/js/views-error.7ba5e19f.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\r\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CircularLoader from 'components/application/Loader/circularLoader';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\nimport {useSelector} from 'react-redux'\r\nimport { fetchClusters } from \"helpers/NetworkRequest\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PubNub from 'pubnub';\r\nimport { PubNubProvider, usePubNub } from 'pubnub-react';\r\n\r\nimport { Helmet } from \"react-helmet\";\r\nimport {Link} from 'react-router-dom'\r\nconst DeliveryDetails = React.lazy(() =>\r\n  import(/* webpackChunkName: \"Delivery-Details\" */ 'views/app/application/delivery/deliveryDetails')\r\n);\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem:{\r\npaddingTop:0,\r\npaddingBottom:0,\r\n  },\r\n  avatar:{\r\n    height:20,\r\n    width:20,\r\n    borderRadius:'50%',\r\n    \r\n  },\r\n  iconContainer:{\r\n    minWidth:30\r\n  },\r\n  cardContainer:{\r\n    position: \"absolute\",\r\n    top:150,\r\n    right:45,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    zIndex:60,\r\n    overflow:'scroll',\r\n    background:'#fff',\r\n    textAlign: \"left\",\r\n    borderRadius: 10,\r\n    transition: \"all 0.4s\",\r\n    boxShadow: \"0px 0px 120px -25px rgba(0, 0, 0, 0.5)\",\r\n    display:'flex',\r\n    alignItems: \"flex-start\",justifyContent:\"center\",minWidth:100\r\n  },\r\n}));\r\n\r\nconst AnyReactComponent = ({ color }) => (\r\n  <div>\r\n    <RoomRoundedIcon style={{ color: color,height:20,width:20 }} />\r\n  </div>\r\n);\r\n\r\nconst PendingIcon = ({ onClick }) => (\r\n  <div>\r\n    <ShoppingBasketIcon onClick={onClick} style={{ color: 'darkgoldenrod',height:20,width:20 }} />\r\n  </div>\r\n);\r\n\r\nconst DeliveryManIcon = () => (\r\n  <div>\r\n    <LocalShippingIcon style={{ color: 'blue',height:20,width:20 }} />\r\n  </div>\r\n);\r\nconst pubnub = new PubNub({\r\n  publishKey: 'pub-c-b62c8c92-592d-4472-bee9-03e3ccf8645b',\r\n  subscribeKey: 'sub-c-ad9893f0-6907-11eb-b914-eedc703588a5',\r\n  // uuid: 'myUniqueUUID'\r\n});\r\nconst ClusterMap = () => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n  const classes = useStyles();\r\n  const [clusters,setClusters] = useState(null)\r\n  const [isLoading,setLoading] = useState(false);\r\n  const [pendingDeliveries,setDelivery] = useState(null);\r\n  const [tracking, setTracking] = useState(new Map());     \r\n  const [channels] = useState(['6038bd0fc35e3b8e8bd9f81a']);\r\n  const updateTracking = (message) => {\r\n    setTracking(new Map(tracking.set(message.agent,message)));\r\n  }\r\n  const pubnub = usePubNub();\r\n  \r\n  const [center, setCenter] = useState({\r\n    lat: 23.202357,\r\n    lng: 77.414254\r\n  });\r\n  const bybId = useSelector(state => state.bybId)\r\n  const [zoom, setZoom] = useState(11);\r\n  const [deliveryID, setdeliveryID] = React.useState('');\r\n\r\n  const handleMessage = event => {\r\n    const message = event.category;\r\n    // console.log(event);\r\n\r\n  };\r\n  const handleOpen = (id) => {\r\n    setdeliveryID(id);\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    // setTimeout(() => {\r\n    //   fetchAccountDetails({dispatch})  \r\n    // }, 1000);\r\n\r\n  };\r\n  useEffect(() => {\r\n    setLoading(true)\r\n      fetchClusters({bybId, setClusters,enqueueSnackbar,setLoading,setDelivery});\r\n      return () => {\r\n\r\n       }\r\n  }, [bybId])\r\n  // console.log(pendingDeliveries);\r\n\r\n  const throttle = (fn,delay) => {\r\n    let inThrottle = false;\r\n  \r\n    return args => {\r\n      if (inThrottle) {\r\n        return;\r\n      }\r\n  \r\n      inThrottle = true;\r\n      fn(args);\r\n      setTimeout(() => {\r\n        inThrottle = false;\r\n      }, delay);\r\n    };\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    pubnub.addListener({\r\n      status: function(statusEvent) {\r\n        // console.log(statusEvent)\r\n          // if (statusEvent.category === \"PNConnectedCategory\") {\r\n          //   handleMessage()\r\n          // }\r\n      },\r\n      message: function({ channel, message, publisher }) {\r\n\r\nif(message){\r\n\r\n updateTracking(message);\r\n\r\n\r\n  // }, 3000)\r\n}\r\n      },\r\n      presence: function(presenceEvent) {\r\n          // This is where you handle presence. Not important for now :)\r\n      }\r\n  });\r\n\r\n  pubnub.subscribe({\r\n      channels: ['6038bd0fc35e3b8e8bd9f81a']\r\n  });\r\n  }, [pubnub, channels]);\r\n\r\n\r\n  return (\r\n      <>\r\n           <Helmet>\r\n        <title>Cluster Summary</title>\r\n        <meta name=\"description\" content=\"Visual Representation of Deliveries of your account Made Simple\"  />\r\n      </Helmet>\r\n      {isLoading?<CircularLoader/>:(\r\n        <div style={{ height: \"90vh\", width: \"100%\" }}>\r\n    <div className={classes.cardContainer} id=\"bright\">\r\n  {isLoading?(<CircularProgress\r\n   style={{height: \"30px\",\r\n     width: \"30px\",\r\n   color: \"#4caf50\"\r\n    }}\r\n       />\r\n       ):(\r\n        <List aria-label=\"Cluster display\">\r\n      \r\n      {clusters?.length===0 && <ListItem className={classes.listItem} style={{marginTop:23,color:'#057g78'}}>No Clusters Present</ListItem>}\r\n      {clusters?.map((item,index)=>{\r\n        return   <ListItem button key={item[0].deliveryAgentName} component={Link} to={{ pathname: '/dashboard/clusterDeliveries', state: { clusterID: item[0].clusterid} }} className={classes.listItem}>\r\n        <ListItemIcon className={classes.iconContainer}>\r\n    <Paper className={classes.avatar} style={{background:item[0].color}} variant={'elevation'}></Paper>\r\n        </ListItemIcon>\r\n        <ListItemText primary={item[0].deliveryAgentName} />\r\n      </ListItem>\r\n   \r\n      })}\r\n        \r\n      </List>\r\n    \r\n       )}\r\n      </div>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyDSl1BOkFlpEiOs3PIavj24cMDo0tDBOIQ\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n        }}\r\n        \r\n      >\r\n        {clusters?.map((item) => {\r\n          return item.map((clusterItem) => {\r\n            return (\r\n              <AnyReactComponent\r\n                lat={clusterItem.geometry.latitude}\r\n                lng={clusterItem.geometry.longitude}\r\n                color={clusterItem.color}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n          });\r\n        })}\r\n\r\n        {clusters===null && pendingDeliveries?.filter(item=>item._source.deliveryStatus==='Pending')?.map((clusterItem) => {\r\n            return (\r\n              <PendingIcon\r\n                lat={clusterItem._source.latitude}\r\n                lng={clusterItem._source.longitude}\r\n                onClick={()=>handleOpen(clusterItem._id)}\r\n                color={'darkgoldenrod'}\r\n\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n        })}\r\n        {\r\n          [...tracking.values()].map(item=>{\r\n            return(\r\n              <DeliveryManIcon\r\n                lat={item.Lat}\r\n                lng={item.Log}\r\n                // onClick={()=>handleOpen(clusterItem._id)}\r\n                color={'#000'}\r\n\r\n                text=\"My Marker\"\r\n              />    \r\n            )\r\n          })\r\n         \r\n        }\r\n\r\n      </GoogleMapReact>\r\n\r\n    </div>\r\n \r\n      )\r\n\r\n}\r\n<Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"Deliveries\"\r\n          aria-describedby=\"Deliveries\"\r\n          closeAfterTransition\r\n                  BackdropComponent={Backdrop}\r\n                  BackdropProps={{\r\n                      timeout: 400,\r\n                  }}\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            flexDirection:'column',\r\n            background:'#ffffff'\r\n          }}\r\n        >\r\n                        <Grow in={open} timeout={250}>\r\n  \r\n        <section style={{background:'#ffffff',width:'100%',height:'100%'}}> \r\n        <div style={{fontSize:40,textAlign:'right',padding:'0 30px',margin:0}}>    <span style={{cursor:'pointer'}} onClick={handleClose} >x</span>\r\n  </div>\r\n          <DeliveryDetails id={deliveryID} handleClose={handleClose}/>\r\n        </section>\r\n        </Grow>\r\n        </Modal>\r\n \r\n    </>);\r\n};\r\nexport default React.memo(ClusterMap);\r\n","//basic dependencies\r\nimport red from '@material-ui/core/colors/indigo';\r\n//dependencies for modal\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport TableContainer from './tableContainer';\r\nimport React, { useEffect, Suspense} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\nimport Loader from '../Loader/Loader'\r\nimport { Helmet } from \"react-helmet\";\r\n// import AgentDetail from '../AgentDetails'\r\nimport { fetchClusterDeliveries } from 'helpers/NetworkRequest';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n//divided component to make them one\r\n\r\n\r\n\r\n//fetchDeliveryDetails to be replaced with get all deliveries\r\n\r\n\r\n\r\n\r\nconst filterLength = (props) => {\r\nconst {array,filter} = props;\r\nreturn array.filter(item=>item._source.deliveryStatus===filter).length\r\n}\r\n\r\nexport default function ClusterDeliveries(props) {\r\n    console.log(props.location,props.location.state,\"--------------------------------\")\r\n    const history = useHistory()\r\nconst clusterID = props.location.state!==null && props.location.state.clusterID\r\nconsole.log(clusterID)\r\n    useEffect(() => {\r\n        fetchClusterDeliveries({clusterID,setDelivery});\r\n  }, [clusterID])\r\n\r\n  const [rows,setDelivery] = React.useState([])\r\n   \r\nconst filterStats = {\r\n  DeliveryDelivered:filterLength({array:rows,filter:'confirmed'}),\r\n  DeliveryCancelled:filterLength({array:rows,filter:'cancelled'}),\r\n  DeliveryPending:filterLength({array:rows,filter:'pending'}),\r\n  DeliveryTransit:filterLength({array:rows,filter:'transit'})\r\n}\r\nconsole.log(rows);\r\n\r\n  return (\r\n    <>\r\n     <Helmet>\r\n        <title>Deliveries</title>\r\n        <meta name=\"description\" content=\"List of Deliveries of your account\"  />\r\n      </Helmet>\r\n <Suspense fallback={<Loader />}>\r\n<ArrowBackIcon onClick={()=>history.goBack()}/>\r\n  <TableContainer rows={rows} setDelivery={setDelivery} />\r\n   </Suspense>\r\n  </>\r\n  );\r\n}\r\n","import TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { StyledTableCell } from '../tableHelpers/helpers';\r\n  \r\n  //this is function to desplay table heads\r\n  function EnhancedTableHead(props) {\r\n    const { classes, order, orderBy, onRequestSort ,headCells} = props;\r\n    \r\n    //helper function to call onRequestSort(handleRequestSort)\r\n    const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n    };\r\n  \r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {headCells.map((headCell) => (\r\n            <StyledTableCell\r\n              key={headCell.id}\r\n              align={'center'}\r\n              padding={headCell.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : 'asc'}\r\n                onClick={createSortHandler(headCell.id)}\r\n              >\r\n                {headCell.label}\r\n                {orderBy === headCell.id ? (\r\n                  <span className={classes.visuallyHidden}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </StyledTableCell>\r\n          ))}  \r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n  \r\n  EnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n  };\r\n  \r\n\r\n  export default EnhancedTableHead","import React,{useState,useEffect} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {postCluster,fetchAgents} from 'helpers/NetworkRequest'\r\nimport {useSelector} from \"react-redux\";\r\nimport { useSnackbar } from 'notistack';\r\nimport ReactButton from \"../button/button\";\r\n\r\n\r\n\r\n\r\nconst tableToolbar = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 550,\r\n    fontSize: \"2rem\"\r\n  },\r\n  toolbarContainer: {\r\n    padding: theme.spacing(3, 1)\r\n  }\r\n}));\r\n\r\nexport default function Toolbar(props) {\r\n  console.log(props)\r\n  const {setClusters,totaldeliveries} = props\r\n    const [isSubmitting,setSubmitting] = useState(false);\r\n    const [rows,setAgents] = React.useState([])\r\n    const bybId = useSelector(state => state.bybId)\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        fetchAgents({bybId,setAgents});\r\n      \r\n          return () => {\r\n            \r\n          }\r\n        }, [bybId])\r\n    const [cluster,setCluster] = useState(null);\r\n\r\n\r\n    const handleClusters = () =>{\r\n        setSubmitting(true)\r\n\r\n        // console.log(rows,cluster>rows.length,cluster===0,\"---------------\")\r\n        // console.log(cluster,\"-------------------\")\r\n        // if(cluster>rows.length || cluster===0){\r\n          // console.log('This cluster cannot be made')\r\n          //   setSubmitting(false)\r\n          //   setCluster(null)\r\n// return;\r\n//         }\r\n// else{\r\n  const clusterData = JSON.stringify({\r\n    BybID:bybId,\r\n    NumberOfCluster:0\r\n})\r\npostCluster({clusterData,enqueueSnackbar,setSubmitting,bybId, setCluster})\r\n// }\r\n    \r\n// setCluster(0)\r\n      }\r\n  const classes = tableToolbar();\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      className={classes.toolbarContainer}\r\n    >\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" >\r\n        <Typography\r\n          variant=\"h5\"\r\n          component={\"h6\"}\r\n          gutterBottom\r\n          className={classes.title}\r\n        >\r\n          Cluster\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid container xs={12} alignItems=\"flex-start\">\r\n\r\n          <ReactButton variant=\"contained\"         disableFocusRipple={true}\r\n                        disableElevation={true}\r\n                        type=\"submit\"\r\n                        onClick={handleClusters}\r\n\r\n style={{marginTop:6,\r\n    maxWidth: 180}}>\r\n  {isSubmitting ? (\r\n                          <CircularProgress\r\n                            style={{\r\n                              height: \"20px\",\r\n                              width: \"20px\",\r\n                              color: \"#fff\"\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          'Create Clusters'\r\n                        )}\r\n </ReactButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12} md={10} container justify=\"flex-start\" style={{marginBottom:20}}>\r\n        <Grid item xs={12} md={3} lg={3} container alignItems=\"center\">\r\n          <Typography variant=\"h6\">Total Deliveries :</Typography>\r\n        </Grid>\r\n        <Grid container xs={12} md={8} alignItems=\"center\">\r\n          <Typography variant=\"h4\" component=\"h5\">{totaldeliveries}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","//basic dependencies\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport red from '@material-ui/core/colors/indigo';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSnackbar } from 'notistack';\r\n\r\n//dependencies for modal\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//dependecies for table\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport React, { Component, useState,useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { genetateOverview } from 'helpers/NetworkRequest';\r\nimport { getComparator, stableSort, StyledTableCell, StyledTableRow } from '../tableHelpers/helpers';\r\nimport EnhancedTableHead from './tableHead';\r\n//divided component to make them one\r\nimport EnhancedTableToolbar from './toolbar';\r\nimport CircularLoader from '../Loader/circularLoader';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    padding:theme.spacing(3)\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    paddingTop:20\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  avatar: {\r\n    color: '#ffffff',\r\n    backgroundColor:red[700],\r\n  },\r\n}));\r\n\r\nfunction ClusterTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('clusterTime');\r\n  const [page, setPage] = React.useState(0);\r\n  const [agentid, setagentid] = React.useState('');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [isLoading,setLoading] = useState(false);\r\n\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [rows,setClusters] = React.useState([])\r\n  \r\n  const bybId = useSelector(state => state.bybId);\r\n  const headCells = [\r\n    { id: 'Agent_Name', numeric: true, disablePadding: false, label: 'Agent Name' },\r\n    { id: 'deliveryAgentID', numeric: true, disablePadding: false, label: 'Agent ID' },\r\n    { id: 'totalDeliveries', numeric: false, disablePadding: false, label: 'Deliveries in Cluster' },\r\n    { id: 'clusterDistance', numeric: false, disablePadding: false, label: 'Cluster Distance' },\r\n    { id: 'clusterTime', numeric: false, disablePadding: false, label: 'Cluster Time' },\r\n    { id: 'distanceObserved', numeric: true, disablePadding: false, label: 'Distance Observed' },\r\n    { id: 'averageWeight', numeric: true, disablePadding: false, label: 'Total Weight' },\r\n\r\n  ];\r\n\r\n\r\n\r\n  useEffect( () => {\r\n    genetateOverview({bybId, setClusters,setLoading})\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [bybId])\r\n\r\n  \r\n\r\n  //this function set the state for sorting information\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  \r\n  //function for page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const calculatedLength = () =>{\r\n    let calculatedlength=0;\r\n      for(let i=0;i<rows.length;i++){\r\n        console.log(rows[i]?.totalDeliveries,calculatedlength,\"====---===---===---==\")\r\ncalculatedlength+=rows[i]?.totalDeliveries\r\n    }\r\n    return calculatedlength;\r\n  }\r\n\r\n  //function for row change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n\r\n//telling how many rows can come into this page\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  return (\r\n    <>\r\n   <Helmet>\r\n        <title>Agents</title>\r\n        <meta name=\"description\" content=\"List of Agents Delivering your deliveries\"  />\r\n      </Helmet>\r\n {isLoading ? (\r\n   <CircularLoader/>\r\n ):(<div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar totaldeliveries={calculatedLength()} setClusters={setClusters} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"Agents\"\r\n            aria-label=\"Agent Data\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {rows && (\r\n                stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => {\r\n                  return (\r\n                    <>\r\n                    <StyledTableRow\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n               <StyledTableCell align=\"center\">{row.deliveryAgentName}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deliveryAgentID}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalDeliveries}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.clusterDistance}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.clusterTime}</StyledTableCell>\r\n\r\n               <StyledTableCell align=\"center\">{(row.distanceObserved/1000).toFixed(2)} KM</StyledTableCell>\r\n               <StyledTableCell align=\"center\">{row.averageWeight}</StyledTableCell>\r\n\r\n              {/*<StyledTableCell align=\"center\" style={{cursor:'pointer',color:'blue'}} onClick={()=>handleOpen(row.bybid)}>View</StyledTableCell> */}\r\n                    </StyledTableRow>\r\n                    </>\r\n                  );\r\n                })\r\n              )\r\n                }\r\n              {emptyRows > 0 && (\r\n                <TableRow >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      \r\n    </div>\r\n   )}\r\n    \r\n  </>\r\n  );\r\n}\r\n\r\nexport default React.memo(ClusterTable)"],"sourceRoot":""}