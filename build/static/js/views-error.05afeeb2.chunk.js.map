{"version":3,"sources":["views/app/application/cluster/clusterMap.js"],"names":["useStyles","makeStyles","theme","listItem","paddingTop","paddingBottom","avatar","height","width","borderRadius","iconContainer","minWidth","cardContainer","position","display","top","right","maxWidth","zIndex","overflow","background","textAlign","transition","boxShadow","AnyReactComponent","color","style","ClusterMap","enqueueSnackbar","useSnackbar","classes","useState","clusters","setClusters","lat","lng","center","bybId","useSelector","state","zoom","setZoom","useEffect","fetchClusters","console","log","name","content","className","id","aria-label","length","marginTop","map","item","index","button","key","clusterid","variant","primary","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onChange","bounds","clusterItem","geometry","latitude","longitude","text"],"mappings":"0PAiBA,MAAMA,EAAYC,YAAYC,IAAD,CAC3BC,SAAS,CACXC,WAAW,EACXC,cAAc,GAEZC,OAAO,CACLC,OAAO,GACPC,MAAM,GACNC,aAAa,OAGfC,cAAc,CACZC,SAAS,IAEXC,cAAc,CACZC,SAAU,WACVC,QAAS,QACTC,IAAI,GACJC,MAAM,GACNC,SAAU,IACVV,OAAQ,IACRW,OAAO,GACPC,SAAS,SACTC,WAAW,OACXC,UAAW,OACXZ,aAAc,GACda,WAAY,WACZC,UAAW,6CAITC,EAAoB,EAAGC,WAC3B,6BACE,kBAAC,IAAD,CAAiBC,MAAO,CAAED,MAAOA,MAsEtBE,UAlEI,KAAO,MACdC,EAAoBC,cAApBD,gBAEJE,EAAU9B,IAHO,EAIQ+B,mBAAS,IAJjB,mBAIhBC,EAJgB,KAIPC,EAJO,OAKKF,mBAAS,CACnCG,IAAK,UACLC,IAAK,YAPgB,mBAKhBC,EALgB,KASjBC,GATiB,KASTC,YAAYC,GAASA,EAAMF,QATlB,EAUCN,mBAAS,IAVV,mBAUhBS,EAVgB,KAUVC,EAVU,KAiBvB,OANAC,oBAAU,KACNC,YAAc,CAACN,QAAOJ,cAAYL,oBAC3B,QAER,CAACS,IACJO,QAAQC,IAAIb,GAER,oCACK,kBAAC,IAAD,KACH,kDACA,0BAAMc,KAAK,cAAcC,QAAQ,qEAErC,yBAAKrB,MAAO,CAAEnB,OAAQ,OAAQC,MAAO,SAC/B,yBAAKwC,UAAWlB,EAAQlB,cAAeqC,GAAG,UAC/C,kBAAC,IAAD,CAAMC,aAAW,mBAEG,IAAlBlB,EAASmB,QAAc,kBAAC,IAAD,CAAUH,UAAWlB,EAAQ3B,SAAUuB,MAAO,CAAC0B,UAAU,GAAG3B,MAAM,YAAlE,uBACvBO,EAASqB,IAAI,CAACC,EAAKC,IACT,kBAAC,IAAD,CAAUC,QAAM,EAACC,IAAKH,EAAK,GAAGI,UAAWV,UAAWlB,EAAQ3B,UACrE,kBAAC,IAAD,CAAc6C,UAAWlB,EAAQpB,eACrC,kBAAC,IAAD,CAAOsC,UAAWlB,EAAQxB,OAAQoB,MAAO,CAACN,WAAWkC,EAAK,GAAG7B,OAAQkC,QAAS,YAE1E,kBAAC,IAAD,CAAcC,QAAO,iBAAYL,SAOnC,kBAAC,IAAD,CACEM,iBAAkB,CAAEJ,IAAK,2CACzBK,cAAe1B,EACf2B,YAAavB,EACbwB,oCAAkC,EAClCC,SAAU,EAAGzB,OAAM0B,aACjBzB,EAAQD,KAITR,EAASqB,IAAKC,GACNA,EAAKD,IAAKc,GAEb,kBAAC3C,EAAD,CACEU,IAAKiC,EAAYC,SAASC,SAC1BlC,IAAKgC,EAAYC,SAASE,UAC1B7C,MAAO0C,EAAY1C,MACnB8C,KAAK","file":"static/js/views-error.05afeeb2.chunk.js","sourcesContent":["import React, { Component, useState,useEffect } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport RoomRoundedIcon from \"@material-ui/icons/RoomRounded\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Paper } from \"@material-ui/core\";\r\nimport {useSelector} from 'react-redux'\r\nimport { fetchClusters } from \"helpers/NetworkRequest\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem:{\r\npaddingTop:0,\r\npaddingBottom:0,\r\n  },\r\n  avatar:{\r\n    height:20,\r\n    width:20,\r\n    borderRadius:'50%',\r\n    \r\n  },\r\n  iconContainer:{\r\n    minWidth:30\r\n  },\r\n  cardContainer:{\r\n    position: \"absolute\",\r\n    display: \"block\",\r\n    top:55,\r\n    right:25,\r\n    maxWidth: 200,\r\n    height: 110,\r\n    zIndex:60,\r\n    overflow:'scroll',\r\n    background:'#fff',\r\n    textAlign: \"left\",\r\n    borderRadius: 10,\r\n    transition: \"all 0.4s\",\r\n    boxShadow: \"0px 0px 120px -25px rgba(0, 0, 0, 0.5)\",\r\n  },\r\n}));\r\n\r\nconst AnyReactComponent = ({ color }) => (\r\n  <div>\r\n    <RoomRoundedIcon style={{ color: color }} />\r\n  </div>\r\n);\r\n\r\nconst ClusterMap = () => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const classes = useStyles();\r\n  const [clusters,setClusters] = useState([])\r\n  const [center, setCenter] = useState({\r\n    lat: 23.202357,\r\n    lng: 77.414254\r\n  });\r\n  const bybId = useSelector(state => state.bybId)\r\n  const [zoom, setZoom] = useState(11);\r\n  useEffect(() => {\r\n      fetchClusters({bybId, setClusters,enqueueSnackbar})\r\n      return () => {\r\n       }\r\n  }, [bybId])\r\n  console.log(clusters);\r\n  return (\r\n      <>\r\n           <Helmet>\r\n        <title>Cluster Summary</title>\r\n        <meta name=\"description\" content=\"Visual Representation of Deliveries of your account Made Simple\"  />\r\n      </Helmet>\r\n    <div style={{ height: \"80vh\", width: \"100%\" }}>\r\n          <div className={classes.cardContainer} id=\"bright\">\r\n     <List aria-label=\"Cluster display\">\r\n      \r\n      {clusters.length===0 && <ListItem className={classes.listItem} style={{marginTop:23,color:'#057g78'}}>No Clusters Present</ListItem>}\r\n      {clusters.map((item,index)=>{\r\n        return   <ListItem button key={item[0].clusterid} className={classes.listItem}>\r\n        <ListItemIcon className={classes.iconContainer}>\r\n    <Paper className={classes.avatar} style={{background:item[0].color}} variant={'circle'}></Paper>\r\n        </ListItemIcon>\r\n        <ListItemText primary={`cluser ${index}`} />\r\n      </ListItem>\r\n   \r\n      })}\r\n        \r\n      </List>\r\n      </div>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyCuMJ3dhADqNoE4tGuWTI3_NlwBihj5BtE\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n        }}\r\n        \r\n      >\r\n        {clusters.map((item) => {\r\n          return item.map((clusterItem) => {\r\n            return (\r\n              <AnyReactComponent\r\n                lat={clusterItem.geometry.latitude}\r\n                lng={clusterItem.geometry.longitude}\r\n                color={clusterItem.color}\r\n                text=\"My Marker\"\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </GoogleMapReact>\r\n    </div>\r\n  </>);\r\n};\r\nexport default ClusterMap;\r\n"],"sourceRoot":""}